all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
ls
ls()
rm(ls())
rm(ls)
swirl()
submit()
rm("submit")
submit()
submit()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5
)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate()
evaluate(func(x){x[1]}, c(8,4,0))
evaluate(func(x){x[1]}, c(8,4,0))
evaluate(func(x), c(8,4,0))
evaluate(x[1], c(8,4,0))
evaluate(function(x){x+1}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
x
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("dfsd")
submit()
mab_libs("sdfd", "df", "dfd")
mad_libs("sdfd", "df", "dfd")
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapplt
?sapply
cls_result <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
dfd
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapplye(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
nique(c(3, 4, 5, 5, 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
?vapply
tapply(flags$population,lags$red, summary)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
| = TRUE)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,
4, replace = TRUE)
sample(1:6,
4, replace = TRUE)
sample(1:20,
10, replace = F)
sample(1:20,
10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(0:1, 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1,
size = 100, prob = 0.7)
flips2 <- binom(1,
+         size = 100, prob = 0.7)
flips2 <- binom(1,size = 100, prob = 0.7)
flips2 <- rbinom(1,size = 100, prob = 0.7)
flips2 <- rbinom(n = 1,size = 100, prob = 0.7)
flips2 <- rbinom(n = 100,size = 1, prob = 0.7)
flips
flips2
sum(flips)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
pnorm(5, mean = 10)
rpoist(5, 1- )
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <-  "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() -
t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cats)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(cars$dist, cars$speed, xlab = "Speed")
plot(cars$speed, cars$dist, xlab = "Speed")
plot(cars$speed, cars$dist, xlab = "Speed", y = "Stopping Distance")
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab =
| "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab =
"Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab =
"Stopping Distance", xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab =
"Stopping Distance", xlab = "Speed", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version
== "3.1.1", country == "US")
?Comparison
filter(cran, r_version
== "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran,
country == "US" | country == "IN")
filter(cran,
size > 100500 &r_os == "linux_gnu" )
filter(cran, size > 100500, r_os
== "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5,
NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
fdd
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size -1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean)
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count,
probs = 0.99)
top_counts <- filter(cran, count > 670)
top_counts <- filter(cran, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, count)
arrange(top_counts, desc(count))
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique ? 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
sumbit()
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count,
-grade)
students2
?gather
res <- gather(students, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into =
c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
students3
# Call gather() to gather the columns class1
# through class5 into a new variable called class.
# The 'key' should be class, and the 'value'
# should be grade.
#
# tidyr makes it easy to reference multiple adjacent
# columns with class1:class5, just like with sequences
# of numbers.
#
# Since each student is only enrolled in two of
# the five possible classes, there are lots of missing
# values (i.e. NAs). Use the argument na.rm = TRUE
# to omit these values from the final result.
#
# Remember that when you're using the %>% operator,
# the value to the left of it gets inserted as the
# first argument to the function on the right.
#
# Consult ?gather and/or ?chain if you get stuck.
#
students3 %>%
gather( class, grade, class1:class5 , na.rm= TRUE) %>%
print
students3
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
# Call gather() to gather the columns class1
# through class5 into a new variable called class.
# The 'key' should be class, and the 'value'
# should be grade.
#
# tidyr makes it easy to reference multiple adjacent
# columns with class1:class5, just like with sequences
# of numbers.
#
# Since each student is only enrolled in two of
# the five possible classes, there are lots of missing
# values (i.e. NAs). Use the argument na.rm = TRUE
# to omit these values from the final result.
#
# Remember that when you're using the %>% operator,
# the value to the left of it gets inserted as the
# first argument to the function on the right.
#
# Consult ?gather and/or ?chain if you get stuck.
#
students3 %>%
gather( class, grade, class1:class5 , na.rm= TRUE) %>%
print
submit()
extract_numeric("class5")
submit()
submit()
?mutate
mutate(students3, class = extract_numeric(class))
mutate(students3, class = extract_numeric(as.character(class))
)
extract_numeric("cs2")
class(students3$class)
students2
students3
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
mutate(students3, class = extract_numeric(as.character(class))
)
class(students3$class)
class(students3$class[1])
students3$class
students3
f <- students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
mutate(f, class = extract_numeric(as.character(class))
)
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutaute(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
submit()
?separate
submit()
submit()
submit()
submit()
setwd("~/Desktop/dss/rprd_rsrch/RepData_PeerAssessment1")
?par
head(weekend_data)
##loading required libraries
library(dplyr)
##loading data
data <- read.csv("./activity.csv")
##changing Dates from factor to Date class objects
data$date <- as.Date(data$date)
##table containing the total number of steps for
##each day
total_steps <- summarise(group_by(data, date), t_steps = sum(steps, na.rm = TRUE))
##plotting histogram
with(total_steps, hist(t_steps))
##calculate the mean and median total number of     ``##steps taken per day
summary_total_steps <- summary(total_steps$steps)
median_total_steps <- summary_total_steps[3]
mean_total_steps <- summary_total_steps[4]
##table containing the total number of steps for
##each interval
total_steps_interval <- summarise(group_by(data, interval), t_steps = sum(steps, na.rm = TRUE))
##time series plot
with(total_steps_interval, plot(interval, t_steps, type = "l"))
##5 minute interval with maximum number of steps
max_total_steps_interval <- total_steps_interval[which(total_steps_interval$t_steps == max(total_steps_interval$t_steps)),1]
##filling in all of the missing values in the      dataset using the mean for that 5-minute interval.
new_data <- data
new_data[is.na(data$steps),1] <- total_steps_interval[total_steps_interval == new_data[is.na(new_data$steps),3], 2]
##new table containing the total number of steps for
##each day
new_total_steps <- summarise(group_by(new_data, date), t_steps = sum(steps, na.rm = TRUE))
##plotting histogram
with(new_total_steps, hist(t_steps))
##calculate the mean and median total number of     ``##steps taken per day
new_summary_total_steps <- summary(total_steps$steps)
new_median_total_steps <- summary_total_steps[3]
new_mean_total_steps <- summary_total_steps[4]
new_data <- mutate(new_data, when = "weekday")
##adjust to change weekend values to weekend using regex
weekend_grep <- grep("^Sat|^Sun", weekdays(new_data$date))
new_data[weekend_grep, 4] <- "weekend"
##new dataset showing average number of steps taken averaged across all weekday days or weekend days
week_total_steps <- summarise(group_by(new_data, interval, when), t_steps = mean(steps, na.rm = TRUE))
##create plot
##creates two datasets for weekend and weekdays
weekend_data <- filter(week_total_steps, when == "weekend")
weekday_data <- filter(week_total_steps, when == "weekday")
par(mfrow = c(2,1))
with(weekend_data, plot(interval, t_steps, type = "l", main = "weekend"))
with(weekday_data, plot(interval, t_steps, type = "l", main = "weekday"))
par(mfrow = c(1,1))
week_total_steps <- transform(week_total_steps, when = factor(when))
head(week_total_steps)
xyplot(t_steps ~ interval | when, data = week_total_steps, layout = c(2, 1))
library(datasets)
library(lattice)
xyplot(t_steps ~ interval | when, data = week_total_steps, layout = c(2, 1))
xyplot(t_steps ~ interval | when, data = week_total_steps, layout = c(2, 1), type = "l")
xyplot(t_steps ~ interval | when, data = week_total_steps, layout = c(1, 2), type = "l")
xyplot(steps = t_steps ~ interval | when, data = week_total_steps, layout = c(1, 2), type = "l")
xyplot(t_steps ~ interval | when, data = week_total_steps, layout = c(1, 2), type = "l", xlab = "Number of steps")
xyplot(t_steps ~ interval | when, data = week_total_steps, layout = c(1, 2), type = "l", ylab = "Number of steps")
xyplot(t_steps ~ interval | when, data = week_total_steps, layout = c(1, 2), type = "l", ylab = "Number of steps", xlab = "Interval")
median_total_steps
summary_total_steps <- summary(total_steps$steps)
summary_total_steps
head(total_steps)
summary_total_steps <- summary(total_steps$t_steps)
summary_total_steps
median_total_steps <- summary_total_steps[3]
mean_total_steps <- summary_total_steps[4]
median_total_steps
