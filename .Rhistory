top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
sumbit()
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count,
-grade)
students2
?gather
res <- gather(students, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into =
c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
students3
# Call gather() to gather the columns class1
# through class5 into a new variable called class.
# The 'key' should be class, and the 'value'
# should be grade.
#
# tidyr makes it easy to reference multiple adjacent
# columns with class1:class5, just like with sequences
# of numbers.
#
# Since each student is only enrolled in two of
# the five possible classes, there are lots of missing
# values (i.e. NAs). Use the argument na.rm = TRUE
# to omit these values from the final result.
#
# Remember that when you're using the %>% operator,
# the value to the left of it gets inserted as the
# first argument to the function on the right.
#
# Consult ?gather and/or ?chain if you get stuck.
#
students3 %>%
gather( class, grade, class1:class5 , na.rm= TRUE) %>%
print
students3
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
# Call gather() to gather the columns class1
# through class5 into a new variable called class.
# The 'key' should be class, and the 'value'
# should be grade.
#
# tidyr makes it easy to reference multiple adjacent
# columns with class1:class5, just like with sequences
# of numbers.
#
# Since each student is only enrolled in two of
# the five possible classes, there are lots of missing
# values (i.e. NAs). Use the argument na.rm = TRUE
# to omit these values from the final result.
#
# Remember that when you're using the %>% operator,
# the value to the left of it gets inserted as the
# first argument to the function on the right.
#
# Consult ?gather and/or ?chain if you get stuck.
#
students3 %>%
gather( class, grade, class1:class5 , na.rm= TRUE) %>%
print
submit()
extract_numeric("class5")
submit()
submit()
?mutate
mutate(students3, class = extract_numeric(class))
mutate(students3, class = extract_numeric(as.character(class))
)
extract_numeric("cs2")
class(students3$class)
students2
students3
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
mutate(students3, class = extract_numeric(as.character(class))
)
class(students3$class)
class(students3$class[1])
students3$class
students3
f <- students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
mutate(f, class = extract_numeric(as.character(class))
)
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutaute(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
submit()
?separate
submit()
submit()
submit()
submit()
setwd("~/Desktop/dss/rprd_rsrch")
setwd("~/Desktop/dss/rprd_rsrch/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
str(data)
View(head(data))
class(data[1,2])
class(data[1,3])
class(data[1,1])
samp <- data[1,2]
class(samo)
class(samp)
as.Date(samp, "%Y%m%d")
as.Date(samp)
class(as.Date(samp))
library(dplyr)
?transform
View(head(data))
data <- data(transform, data$date <- as.Date(data$date))
data <- transform(data$date <- as.Date(data$date))
data <- transform(data, data$date <- as.Date(data$date))
data <- transform(data, date = as.Date(date))
data <- as.tbl_df(data)
?tbl_df
data <- tbl_df(data)
data <- tbl_df(read.table("activity.csv"))
tbl_df(as.data.frame(data))
data <- read.csv("activity.csv")
tbl_df(data)
data <- tbl_df(read.csv("activity.csv"))
View(head(data))
class(data[1,2])
samp <- data[1,2]
samp
class(samp)
str(samp)
samp <- as.Date(samp)
somp
data <- read.csv("activity.csv")
samp <- data[1,2]
class(samp)
samp <- as.Date(samp)
samp
class(samp)
data$date <- as.Date(data$date)
View(head(data))
class(data[1,2])
with(data, hist(steps, breaks = date)
)
samp <- head(data)
with(samp, hist(steps, breaks = date)
)
with(samp, hist(steps, breaks = date))
weekday(data[1,2])
as.weekday(data[1,2])
weekdays(data[1,2])
with(samp, hist(steps, breaks = weekdays(date)))
hist(data)
hist(data$steps)
group_by
?group_by
data1 <- group_by(data, date)
mutate(data, avg = mean(steps, na.rm = TRUE))
View(head(data1))
data1 <- mutate(data, avg = mean(steps, na.rm = TRUE))
View(head(data1))
?gather
library(tidyr)
?gather
data1 <- group_by(data, date)
summarize(data, date, mean(steps, na.rm = T))
?summarize
summarize(data1, date, mean(steps, na.rm = T))
summarise(group_by(data, date)), mean(steps, na.rm = TRUE)
summarise(group_by(data, date)), mean(steps, na.rm = TRUE))
summarise(group_by(data, date), mean(steps, na.rm = TRUE))
summarise(group_by(data, date), sum(steps, na.rm = TRUE))
data1 <- summarise(group_by(data, date), total_steps = sum(steps, na.rm = TRUE))
View(head(data1))
hist(data1$steps, date)
hist(data1$steps, data1$date)
hist(data1$total_steps, data1$date)
hist(data1$total_steps, weekdays(data1$date))
?hist
hist(data1$total_steps)
hist(data1$date)
hist(data1$date, data1$steps)
hist(data1$date, data1$total_steps)
data2 <- data1
data2$date <- as.factor(data2$date)
hist(data2$date, data2$total_steps)
hist(data2$total_steps, data2$date)
class(data2[1,2])
class(data2[1,1])
data <- read.csv("activity.csv")
total_steps <- summarise(group_by(data, date), steps = sum(steps, na.rm = TRUE))
head(data)
head(total_steps)
with(total_steps, hist(steps, date))
with(total_steps, hist(steps))
with(total_steps, hist(date, steps))
with(total_steps, hist(steps, date))
with(total_steps, hist(steps, as.Date(date)))
with(total_steps, hist(steps, as.Year(date)))
with(total_steps, hist(steps, YEAR(date)))
with(total_steps, hist(steps, year(date)))
with(total_steps, hist(steps))
summarize(total_steps$steps)
summary(total_steps$steps)
summary(total_steps$steps)$Median
summary(total_steps$steps)[1]
summary(total_steps$steps)[3]
summary(total_steps$steps)[4]
median_total_steps <- summary_total_steps[3]
mean_total_steps <- summary_total_steps[4]
summary_total_steps <- summary(total_steps$steps)
median_total_steps <- summary_total_steps[3]
mean_total_steps <- summary_total_steps[4]
data3 <- join(data, total_steps, by = date)
data3 <- row_bind(data, total_steps, by = "date")
data3 <- rowbind(data, total_steps, by = "date")
data3 <- rbind(data, total_steps, by = "date")
?join
?colbind
?col_bind
?cbind
data3 <- cbind(data, total_steps, by = "date")
head(data3)
data3 <- inner_join(data, total_steps, by = "date")
head(data3)
data3 <- inner_join(data, total_steps = total_steps, by = "date")
data3 <- inner_join(data, total_steps, by = "date")
total_steps <- summarise(group_by(data, date), t_steps = sum(steps, na.rm = TRUE))
data3 <- inner_join(data, total_steps, by = "date")
head(data3)
with(data, plot(interval, t_steps, type = "l"))
with(data3, plot(interval, t_steps, type = "l"))
with(data3, plot(interval, t_steps))
with(data3, plot(interval, t_steps, type = "l"))
total_steps_interval <- summarise(group_by(data, interval), t_steps = sum(steps, na.rm = TRUE))
head(total_steps_interval)
with(total_steps_interval, plot(interval, t_steps, type = "l"))
max(total_steps_interval$t_steps)
mean(total_steps_interval$t_steps)
?max
with(total_steps_interval, plot(interval, t_steps, type = "l"))
which(total_steps_interval$steps == max(total_steps_interval$t_steps))
total_steps_interval$steps == max(total_steps_interval$t_steps)
which(total_steps_interval$t_steps == max(total_steps_interval$t_steps))
total_steps_interval[which(total_steps_interval$t_steps == max(total_steps_interval$t_steps)),1]
total_steps_interval[which(total_steps_interval$t_steps == max(total_steps_interval$t_steps)),2]
head(total_steps_interval)
View(data)
total_steps_interval[which(total_steps_interval$t_steps == max(total_steps_interval$t_steps)),2]
total_steps_interval[which(total_steps_interval$t_steps == max(total_steps_interval$t_steps)),1]
sum(is.na(data$steps))
head(data)
head(total_steps)
t_avg <- summarise(group_by(data, interval), t_avg = mean(steps, na.rm = TRUE))
head(t_avg)
t_avg <- summarise(group_by(data, date), t_avg = mean(steps, na.rm = TRUE))
head(t_avg)
head(total_steps_interval)
head(data)
is.na(data$steps)
head(data)
head(total_steps_interval)
data4 <- data
data4[is.na(data4$steps),1] <- total_steps_interval[$interval == data4[is.na(data4$steps),3], 2]
data4[is.na(data4$steps),1] <- total_steps_interval[total_steps_interval == data4[is.na(data4$steps),3], 2]
head(data4)
head(total_steps_interval)
View(data)
View(data4)
View(total_steps_interval)
View(data)
tail(data)
tail(data3)
tail(data4)
new_data <- data
new_data[is.na(data$steps),1] <- total_steps_interval[total_steps_interval == new_data[is.na(new_data$steps),3], 2]
new_total_steps <- summarise(group_by(new_data, date), t_steps = sum(steps, na.rm = TRUE))
##plotting histogram
with(new_total_steps, hist(steps))
```
##new table containing the total number of steps for
##each day
new_total_steps <- summarise(group_by(new_data, date), t_steps = sum(steps, na.rm = TRUE))
##plotting histogram
with(new_total_steps, hist(t_steps))
total_steps <- summarise(group_by(data, date), t_steps = sum(steps, na.rm = TRUE))
##plotting histogram
with(total_steps, hist(t_steps))
##new table containing the total number of steps for
##each day
new_total_steps <- summarise(group_by(new_data, date), t_steps = sum(steps, na.rm = TRUE))
##plotting histogram
with(new_total_steps, hist(t_steps))
new_total_steps
total_steps <- summarise(group_by(data, date), t_steps = sum(steps, na.rm = TRUE))
##plotting histogram
with(total_steps, hist(t_steps))
summary(total_steps$t_steps)
summary(new_total_steps$t_steps)
##new table containing the total number of steps for
##each day
new_total_steps <- summarise(group_by(new_data, date), t_steps = sum(steps, na.rm = TRUE))
##plotting histogram
with(new_total_steps, hist(t_steps))
head(new_data)
class(new_data[1,2])
weekdays(new_data[1,2])
?weekdays
class(samp)
ss <- as.Date(new_data[1,2])
class(ss)
weekdays(ss)
weekends(ss)
grep(^"Sat"|^"Sun", ss)
grep("^Sat"|"^Sun", ss)
grep("^Sat", ss)
grep("^Mon", ss)
grep(^Mon, ss)
grep("^(Mon_", ss)
grep("^Mon", ss)
grep("^Monday", ss)
grep(^[Mon], ss)
?grep
ss
sa <- weekdays(ss)
grep("^Mon", sa)
grep("^Sat"|"Sun", sa)
grep("^Sat""^Sun", sa)
grep("^Sat"."^Sun", sa)
grep("^Sat"\|"^Sun", sa)
grep(^Sat|^Sun, sa)
grep("^Sat", sa)
grep("^Sat"||"^Sun", sa)
grep("^Sat^Sun", sa)
sa <- ca("Sat", "Sun", "Boo")
sa <- c("Sat", "Sun", "Boo")
grep("^Sat^Sun", sa)
grep("^Sat", sa)
grep("^Sat|^Sun", sa)
weekdays(ss, abbreviate = TRUE)
sa <- "Sat"
grep("^Sat|^Sun", sa)
grep("^St|^Sn", sa)
grep("^St|^Sn", sa) == 0
grep("^Sat|^Sun", sa) == 1
new_data2 <- mutate(new_data, weekday)
new_data2 <- mutate(new_data, weekday = "weekday")
head(new_data2)
grep("^Sat|^Sun", weekdays(new_data2$date)
)
new_data$date <- as.Date(new_data$date)
grep("^Sat|^Sun", weekdays(new_data2$date))
grep("^Sat|^Sun", weekdays(new_data$date))
head(new_data2)
x <- grep("^Sat|^Sun", weekdays(new_data$date))
new_data[x, 4] <- "weekend"
tail(new_data)
##add new factor to new data table, setting the default as weekday
new_data <- mutate(new_data, when = "weekday")
##adjust to change weekend values to weekend using regex
weekend_grep <- grep("^Sat|^Sun", weekdays(new_data$date))
new_data[weekend_grep, 4] <- "weekend"
new_data <- data
new_data[is.na(data$steps),1] <- total_steps_interval[total_steps_interval == new_data[is.na(new_data$steps),3], 2]
##add new factor to new data table, setting the default as weekday
new_data <- mutate(new_data, when = "weekday")
##adjust to change weekend values to weekend using regex
weekend_grep <- grep("^Sat|^Sun", weekdays(new_data$date))
new_data[weekend_grep, 4] <- "weekend"
``##loading data
data <- read.csv("activity.csv")
##changing Dates from factor to Date class objects
data$date <- as.Date(data$date)
new_data <- data
new_data[is.na(data$steps),1] <- total_steps_interval[total_steps_interval == new_data[is.na(new_data$steps),3], 2]
##add new factor to new data table, setting the default as weekday
new_data <- mutate(new_data, when = "weekday")
##adjust to change weekend values to weekend using regex
weekend_grep <- grep("^Sat|^Sun", weekdays(new_data$date))
new_data[weekend_grep, 4] <- "weekend"
new_data[, 4] == "weekend"
head(new_da)
head(new_data)
tail(new_data)
new_data[5000:5010]
new_data[5000:5010,]
new_data[6000:5010,]
new_data[7000:7010,]
new_data[10000:10010,]
week_total_steps <- summarise(group_by(data, interval, when), t_steps = sum(steps, na.rm = TRUE))
week_total_steps <- summarise(group_by(new_data, interval, when), t_steps = sum(steps, na.rm = TRUE))
head(week_total_steps)
with(new_data, plot(interval, t_steps, type = "l"))
with(week_total_steps, plot(interval, t_steps, type = "l"))
with(week_total_steps, plot(interval, t_steps, type = "l", subset = when))
?plot
dd <- group_by(week_total_steps, when)
with(dd, plot(interval, t_steps, type = "l"))
?plot
with(dd, qplot(interval, t_steps, type = "l"))
library(ggplot2)
with(dd, qplot(interval, t_steps, type = "l"))
with(dd, qplot(interval, t_steps, col = when))
head(select(dd, when = "weekday"))
head(select(dd, when == "weekday"))
head(filter(dd, when == "weekday"))
head(filter(dd, when == "weekend"))
weekend_data <- filter(new_data, when == "weekend")
weekday_data <- filter(new_data, when == "weekday")
par(mfrow = c(2,1))
with(weekend, plot(interval, t_steps, type = "l", main = "weekend"))
with(weekday, plot(interval, t_steps, type = "l", main = "weekday"))
with(weekend_data, plot(interval, t_steps, type = "l", main = "weekend"))
with(weekday_data, plot(interval, t_steps, type = "l", main = "weekday"))
head(new_data)
with(weekend_data, plot(interval, steps, type = "l", main = "weekend"))
with(weekday_data, plot(interval, steps, type = "l", main = "weekday"))
with(weekend_data, plot(interval, steps, type = "l", main = "weekend"))
par(mfrow = c(1,1))
with(weekend_data, plot(interval, steps, type = "l", main = "weekend"))
with(weekday_data, plot(interval, steps, type = "l", main = "weekday"))
with(weekend_data, plot(interval, steps, type = "l", main = "weekend"))
with(weekday_data, plot(interval, steps, type = "l", main = "weekday"))
with(dd, qplot(interval, t_steps, col = when))
with(weekday_data, plot(interval, steps, type = "l", main = "weekday"))
with(weekday_data, plot(interval, steps, type = "l", main = "weekday"))
head(week_total_steps)
week_total_steps <- summarise(group_by(new_data, interval, when), t_steps = sum(steps, na.rm = TRUE))
head(week_total_steps)
par(mfrow = c(2,1))
with(weekend_data, plot(interval, steps, type = "l", main = "weekend"))
with(weekday_data, plot(interval, steps, type = "l", main = "weekday"))
with(weekend_data, plot(interval, steps, type = "l", main = "weekend"))
par(mfrow = c(1,1))
with(weekend_data, plot(interval, steps, type = "l", main = "weekend"))
with(week_total_steps, plot(interval, steps, type = "l"))
with(week_total_steps, plot(interval, t_steps, type = "l"))
weekend_data <- filter(week_total_steps, when == "weekend")
weekday_data <- filter(week_total_steps, when == "weekday")
par(mfrow = c(2,1))
with(weekend_data, plot(interval, t_steps, type = "l", main = "weekend"))
with(weekday_data, plot(interval, t_steps, type = "l", main = "weekday"))
par(mfrow = c(1,1))
with(weekend_data, plot(interval, t_steps, type = "l", main = "weekend"))
with(weekday_data, plot(interval, t_steps, type = "l", main = "weekday"))
##new dataset showing average number of steps taken averaged across all weekday days or weekend days
week_total_steps <- summarise(group_by(new_data, interval, when), t_steps = mean(steps, na.rm = TRUE))
##create plot
##creates two datasets for weekend and weekdays
weekend_data <- filter(week_total_steps, when == "weekend")
weekday_data <- filter(week_total_steps, when == "weekday")
par(mfrow = c(2,1))
with(weekend_data, plot(interval, t_steps, type = "l", main = "weekend"))
with(weekday_data, plot(interval, t_steps, type = "l", main = "weekday"))
par(mfrow = c(1,1))
with(weekend_data, plot(interval, t_steps, type = "l", main = "weekend"))
head(week_total_steps)
summary(week_total_steps$t_steps)
setwd("~/Desktop/dss/rprd_rsrch/RepData_PeerAssessment1")
